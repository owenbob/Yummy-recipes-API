
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:

      - image: circleci/python:3.6.1
        environment:
          TEST_DB: postgresql://yummyrecipes:admin@localhost:5432/test
             
      - image: circleci/postgres:9.6.6
        environment:
          SECRET_KEY: "********"
          POSTGRES_USER: yummyrecipes
          POSTGRES_DB: test
          POSTGRES_PASSWORD: admin

          

    working_directory: ~/Yummy-recipes-API

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - run:
          name: Deploy Master to Heroku
          command: |  # this command is framework-dependent and may vary
            heroku git:remote -a circle-yummy-api
            git push --force https://heroku:$ad350c82-032b-4fb8-b46b-c0b8280cb941@git.heroku.com/$circle-yummy-api.git HEAD:refs/heads/master
            sleep 5  # sleep for 5 seconds to wait for dynos
            heroku restart

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-job
      - deploy-jobs:  # only deploy when master successfully builds
          requires:
            - build-job
          filters:
            branches:
              only: master


